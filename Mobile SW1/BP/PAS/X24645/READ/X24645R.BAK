Uses crt;
{Programa for read & write 24x645}
var  objem,Port_lpt,Control_reg,Status_reg:word;
     code:integer;
     Dlitelnost:longint;
     klavisha:char;
     filname:text;
     Dannie_in:array[0..31,0..255] of byte;
     outfile : file;
     fil_str:string;
     dannie_out:byte;
Procedure Cikl;
Var Per_cikla:longint;
Begin
For Per_cikla:=1 to Dlitelnost do begin end;
end;

Procedure Start_I2C;
{   D0 - CLK
    D1 - CS
    D2 - DI }
begin
Port[Port_lpt]:=$F5;{BIN '11110 101'}
Cikl;
Port[Port_lpt]:=$F1;{BIN '11110 001'- CLK HIGH}
Cikl;
Port[Port_lpt]:=$F1;{BIN '11110 000' CS & CLK - HIGH}
Cikl;
Port[Port_lpt]:=$F0;{BIN '11110 100'}
Cikl;
delay(1);
end;

Procedure Stop_I2C;
{   D0 - CLK
    D1 - CS
    D2 - DI }
begin
Port[Port_lpt]:=$F0;{BIN '11110 000'}
Cikl;
Port[Port_lpt]:=$F1;{BIN '11110 001'- CLK HIGH}
Cikl;
Port[Port_lpt]:=$F5;{BIN '11110 101' CS & CLK - HIGH}
Cikl;
Port[Port_lpt]:=$F5;{BIN '11110 101'}
Cikl;
end;

Procedure High_pulse;
{   D0 - CLK
    D1 - CS
    D2 - DI }
begin
Port[Port_lpt]:=$F4;{BIN '11111 100'}
Cikl;
Port[Port_lpt]:=$F5;{BIN '11111 101'}
Cikl;
Port[Port_lpt]:=$F5;{BIN '11111  101'}
Cikl;
Port[Port_lpt]:=$F4;{BIN '11111  100'}
Cikl;
end;

Procedure Low_pulse;
{   D0 - CLK
    D1 - CS
    D2 - DI }
begin
Port[Port_lpt]:=$F0;{BIN '11111 000'}
Cikl;
Port[Port_lpt]:=$F1;{BIN '11111 001'}
Cikl;
Port[Port_lpt]:=$F1;{BIN '11111  001'}
Cikl;
Port[Port_lpt]:=$F0;{BIN '11111  000'}
Cikl;
end;

Procedure Ask_master;
begin Low_pulse end;

Procedure Ask_in;
var temp_byte_in,byte_int:byte;
begin
Port[Port_lpt]:=$F4;{BIN '11111 100'}
Cikl;
Port[Port_lpt]:=$F5;{BIN '11111 101'}
Cikl;
Repeat
                 byte_int:=Port[Status_reg];
                 temp_byte_in:=byte_int and $20;
until temp_byte_in=$00;
Port[Port_lpt]:=$F5;{BIN '11111  101'}
Cikl;
Port[Port_lpt]:=$F4;{BIN '11111  100'}
Cikl;
Writeln('Ask');
end;

function Byte_in:byte;
var baitik,k,output_data,temp_byte:byte;
begin
             temp_byte:=0;
             Output_data:=0;
             for k:=1 to 8 do
  begin
Output_data:= temp_byte and $FE;
Port[Port_lpt]:=$F4;{BIN '11111 100'}
Cikl;
Port[Port_lpt]:=$F5;{BIN '11111 101'}
Cikl;
temp_byte:=Port[Status_reg];
Port[Port_lpt]:=$F5;{BIN '11111  101'}
Cikl;
Port[Port_lpt]:=$F4;{BIN '11111  100'}
Cikl;
                 baitik:=temp_byte shr 5;
                 temp_byte:=baitik and $01;
                 Output_data:=Output_data+temp_byte;
                 temp_byte:=Output_data shl 1;
                 end;
Byte_in:=output_data;
end;

Procedure Byte_out(var mimory:byte);
var temp_byte_out,temp,k:byte;
    s:string;
begin
          temp_byte_out:=mimory;
          s:='';
          for k:=1 to 8  do
             begin
             temp:=temp_byte_out and $80;
             if temp=$00 then begin Low_pulse;s:=s+'0';end;
             if temp=$80 then begin High_pulse;s:=s+'1';end;
             temp_byte_out:=mimory SHL k;
             end;
end;

Procedure Read_secyrity_word;
begin
Start_I2C;
dannie_out:=$BE;{10111110}
Byte_out(dannie_out);
Ask_in;
dannie_out:=$FF;
Byte_out(dannie_out);
Ask_in;

Start_I2C;
dannie_out:=$BF;{10111110}
Byte_out(dannie_out);
Ask_in;
dannie_in[31,255]:=byte_in;
High_pulse;
Stop_i2c;
end;



Procedure Read_x24645;
var Segm,offs:byte;

begin
Write('Reading ');
          Port[port_lpt]:=$FF;
          delay(1);

          Start_I2C;
          dannie_out:=$80;
          Byte_out(dannie_out);
          Ask_in;
          dannie_out:=$00;
          Byte_out(dannie_out);
          Ask_in;

          Start_I2C;
          dannie_out:=$81;
          Byte_out(dannie_out);
          Ask_in;

          for segm:=0 to 31 do
          begin
               write(chr($B1));
               for offs:=0 to 255 do
               begin
               dannie_in[segm,offs]:=byte_in;
if (segm=31) and (offs=254) then begin ; HIGH_pulse end else begin ask_master;end;
               end;
          end;
          Stop_I2C;
  Read_secyrity_word;
  assign(outfile, fil_str);
  rewrite(outfile, 1);
  blockwrite(outfile, dannie_in, sizeof(dannie_in));
  close(outfile);
Writeln;Writeln;
Writeln('Read complete !');

end;


Procedure Detect_port;
var p:^word;
begin
p:= Ptr($00, $0408);
Port_lpt:=p^;
Control_reg:=Port_lpt+2;
Status_reg:=Port_lpt+1;
Control_reg:=$0F;
Port[Port_lpt]:=$FF;

end;

var vihod:boolean;
    temp_str:string;
begin
ClrScr;
  writeln('X-READER. Version 3.0');
  writeln('Copyright (c) 1999 by SLV. Commercial version');
If paramcount<>1 then
begin
repeat
ClrScr;
Writeln(' Please enter output filename:');
Readln(temp_str);
until length(temp_str)>0;
fil_str:=temp_str;
end
else
begin
fil_str:=paramstr(1);
end;
Detect_port;
Assign(filname,'memory.ini');
Reset(filname);
Vihod:=false;
repeat
  ReadLn(Filname, temp_str);
  If temp_str='X24645' then
  begin
  Readln(filname,temp_str);Val(temp_str,Dlitelnost,code);vihod:=true;
  end;
until (temp_str='END') or (vihod=true);
Close(filname);
IF VIHOD=True then  begin Read_x24645; end else begin Writeln('Not find string x24645');end;
end.